/**
 * Created by slee on 23/06/15.
 */

package kbd


import org.lwjgl._
import org.lwjgl.glfw.{GLFW, _}
import org.lwjgl.opengl.{GL11, GLContext}

import kbd.graphics.{Vert, DebugLine}


object Main {
  var finished = false
  val WIDTH = 500
  val HEIGHT = 500
  var window:Long = 0

  var line:DebugLine = _;

  def main(args: Array[String]) {
    System.setProperty("org.lwjgl.librarypath", "lib/native/")

    println ("B4 init")

    init(false)
    println ("After init")
    run

    GLFW.glfwDestroyWindow(window)
    GLFW.glfwTerminate()
  }

  def init(fullscreen:Boolean){
    if ( GLFW.glfwInit() != GL11.GL_TRUE )
      println ("glfw init failed")

    println("glwfw init succeeded")

    window = GLFW.glfwCreateWindow(WIDTH,HEIGHT, "asd":CharSequence, null.asInstanceOf[Long],null.asInstanceOf[Long])

    GLFW.glfwDefaultWindowHints()
    GLFW.glfwSetKeyCallback(window  , GLFW.GLFWKeyCallback(new GLFWKeyCallback.SAM {
      override def invoke(l: Long, i: Int, i1: Int, i2: Int, i3: Int): Unit = {
        if (i == GLFW.GLFW_KEY_ESCAPE) GLFW.glfwSetWindowShouldClose(window, GL11.GL_TRUE)
      }
    }))

    GLFW.glfwMakeContextCurrent(window)
    GLFW.glfwShowWindow(window)
    GLContext.createFromCurrent()

    line = new DebugLine(200);
    line.init(1f, (0f,0f))

    val col = Array(1f,1f,1f,1f)
    for (kxy <- Keyboard.keyMap) {
      line.addVert(new Vert( Array(kxy._2._1, kxy._2._2, .1f, 1f), col))
    }

    GL11.glPointSize(15.0f)
    GL11.glLineWidth(15.0f)

  }

  def loop() {

    line.beginRender(GL11.GL_POINTS)


  }

  def run(){

    opengl.GL11.glClearColor(1.0f, 1.0f, 0.0f, 1.0f)

    while(GLFW.glfwWindowShouldClose(window) == GL11.GL_FALSE){
      GL11.glClear(GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT)

      loop()

      GLFW.glfwSwapBuffers(window)
      GLFW.glfwPollEvents()
    }
  }
}
